openapi: 3.0.3
info:
  title: Twidder Backend
  version: 1.0.0
servers:
  - url: http://localhost/api/v1
paths:
  /session:
    post:
      tags:
        - sessions
      summary: Create a new session
      operationId: createSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
        required: true
      responses:
        '201':
          description: Session successfully created
          headers:
            Authorization:
              schema:
                  type: string
              description: Authorization token
              required: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - sessions
      summary: Destroy an existing session
      operationId: deleteSession
      responses:
        '200':
          description: Session successfully destroyed
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
  /users:
    post:
      tags:
        - users
      summary: Create a new user account
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        required: true
      responses:
        '201':
          description: User account successfully created
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{userEmail}:
    get:
      tags:
        - users
      summary: Get user information
      operationId: getUser
      parameters:
        - in: path
          name: userEmail
          schema:
            type: string
          required: true
          description: User email address
      responses:
        '200':
          $ref: '#/components/responses/UserData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictEmailError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
    patch:
      tags:
        - users
      summary: Update user information
      operationId: updateUser
      parameters:
        - in: path
          name: userEmail
          schema:
            type: string
          required: true
          description: User email address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        required: true
      responses:
        '200':
          description: User data successfully updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - users
      summary: Delete user
      operationId: deleteUser
      parameters:
        - in: path
          name: userEmail
          schema:
            type: string
          required: true
          description: User email address
      responses:
        '200':
          description: User account successfully deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: [ ]
  /posts:
    post:
      tags:
        - posts
      summary: Create a new post on user's wall
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/NewPostID'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
    get:
      tags:
        - posts
      summary: List posts
      operationId: getPosts
      parameters:
        - in: query
          name: user_email
          schema:
            type: string
            format: email
          required: false
          description: User email address to filter posts by user
      responses:
        '200':
          $ref: '#/components/responses/UserPosts'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
  /posts/{postId}:
    patch:
      tags:
        - posts
      summary: Update post
      operationId: updatePost
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
          description: Post ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPost'
        required: true
      responses:
        '200':
          description: Post successfully updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
    delete:
      tags:
        - posts
      summary: Delete post
      operationId: deletePost
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
          description: Post ID
      responses:
        '200':
          description: Post successfully deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

components:
  schemas:
    SignIn:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    UserData:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        gender:
          type: string
        city:
          type: string
        country:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    UserPost:
      type: object
      properties:
        id:
          type: string
          format: uuid
        author:
          type: string
          format: email
        created:
          type: string
          format: date-time
        content:
          type: string
      required:
        - id
        - author
        - created
        - content
    NewPost:
      type: object
      properties:
        user:
          type: string
        content:
          type: string
      required:
        - user
        - content
    EditPost:
      type: object
      properties:
        message:
          type: string
      required:
        - message
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    UserData:
      description: User data
      content:
        application/json:
          schema:
            type: object
            properties:
              firstname:
                type: string
              lastname:
                type: string
              gender:
                type: string
              city:
                type: string
              country:
                type: string
              email:
                type: string
                format: email
            required:
              - firstname
              - lastna
              - gender
              - city
              - country
              - email
    UserPosts:
      description: List of user posts
      content:
        application/json:
          schema:
            type: object
            properties:
              posts:
                type: array
                items:
                  $ref: '#/components/schemas/UserPost'
            required:
              - posts
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: This operation is forbidden
    NotFoundError:
      description: Resource not found
    ConflictEmailError:
      description: The email is already taken
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
    NewPostID:
      description: New post ID
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
            required:
              - id
